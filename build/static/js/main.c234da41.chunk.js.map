{"version":3,"sources":["styles/styles.js","reducers/dataReducer.js","reducers/dictionaryReducer.js","services/services.js","components/Dataset.js","components/Example.js","components/Home.js","reducers/alertReducer.js","reducers/successReducer.js","services/validators.js","components/CreateDictionary.js","reducers/editReducer.js","components/AllDictionaries.js","components/EditDictionary.js","components/ApplyDictionary.js","App.js","store.js","index.js"],"names":["DivWrapper","styled","div","DictionaryStyle","DictionaryStyleWide","ApplyDictionaryStyle","BtnContainer","FormStyle","dataReducer","state","action","type","data","newState","JSON","parse","stringify","i","length","j","color","dictionaryReducer","updatedDictionary","id","map","dictionary","dictionaryToDelete","find","d","filter","a","async","axios","get","response","post","put","delete","connect","datas","editDictionary","props","Table","celled","Header","Row","HeaderCell","Body","p","key","Cell","product","price","Example","className","style","dictionaries","setAlert","content","duration","dispatch","setTimeout","alertReducer","setSuccess","successReducer","checkForIssues","newDictionary","valueSets","domain","range","push","chains","addChains","domains","val","ranges","result","Set","console","log","validateChains","cycles","JsonValueSets","swap","swapper","indexOf","validateCycles","forks","domainNames","lastIndexOf","rangeNames","validateForks","duplicates","validateDuplicates","forEach","value","joinStrings","concat","splice","letterCase","string","toLowerCase","split","replace","charAt","toUpperCase","join","RemoveBtn","CreateDiv","mapDispatchToProps","addDictionary","alert","success","useState","original","setOriginal","desired","setDesired","values","setValues","Message","positive","negative","onSubmit","event","preventDefault","persist","name","target","description","services","then","catch","error","placeholder","required","onChange","onClick","valueSet","Icon","newValues","index","removeValue","editReducer","deleteDictionary","applicable","disabled","noIssuesStyle","backgroundColor","duplicateStyle","forkStyle","cycleStyle","chainStyle","manyIssuesStyle","icon","v","Button","basic","to","window","confirm","remove","NameDiv","updatedEditDictionary","showTable","setShowTable","showEdit","setShowEdit","showEditForm","setShowEditForm","showName","setShowName","showRename","setShowRename","newName","setNewName","newOriginal","setNewOriginal","newDesired","setNewDesired","oldValueSet","setOldValueSet","tableShow","display","editShow","editFormShow","renameShow","dictionaryNameShow","renamedDictionary","updatedValuesDictionary","removeValueSet","originalToCase","desiredToCase","newValueSets","editData","size","NavBar","nav","initData","initDictionaries","useEffect","Fragment","exact","path","render","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c234da41.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const DivWrapper = styled.div`\r\n    margin-top: 4rem;\r\n`\r\n\r\nexport const DictionaryStyle = styled.div`\r\n    margin: 0 auto;\r\n    margin-bottom: 2rem;\r\n    width: 45rem;\r\n`\r\n\r\nexport const DictionaryStyleWide = styled.div`\r\n    margin: 0 auto;\r\n    margin-bottom: 2rem;\r\n    width: 60rem;\r\n`\r\n\r\nexport const ApplyDictionaryStyle = styled.div`\r\n    margin-bottom: 2rem;\r\n    width: 30rem;\r\n`\r\n\r\nexport const BtnContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`\r\n\r\nexport const FormStyle = styled.div`\r\n    margin: 0 auto;\r\n    width: 70%;\r\n`","const dataReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'INITDATA':\r\n            return action.data\r\n        case 'ADD_DATA':\r\n            return [...state, action.data]\r\n        case 'EDIT_DATA':\r\n            const newState = JSON.parse(JSON.stringify(state))\r\n            for (let i = 0; i < action.data.length; i++) {\r\n                for (let j = 0; j < newState.length; j++) {\r\n                    if (action.data[i][0] === newState[j].color) {\r\n                        newState[j].color = action.data[i][1]\r\n                    }\r\n                }\r\n            }\r\n            return newState\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const initData = (data) => {\r\n    return {\r\n        type: 'INITDATA',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const addData = (data) => {\r\n    return {\r\n        type: 'ADD_DATA',\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const editData = (valueSet) => {\r\n    return {\r\n        type: 'EDIT_DATA',\r\n        data: valueSet\r\n    }\r\n}\r\n\r\nexport default dataReducer","const dictionaryReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'INIT_DICTIONARY':\r\n            return action.data\r\n        case 'ADD_DICTIONARY':\r\n            return [...state, action.data]\r\n        case 'UPDATE':\r\n            const updatedDictionary = action.data\r\n            const id = action.data.id            \r\n            return state.map(dictionary => dictionary.id !== id ? dictionary : updatedDictionary)\r\n        case 'DELETE_DICTIONARY':\r\n            const dictionaryToDelete = state.find(d => d.id === action.data.id)\r\n            return state.filter(d => d.id !== dictionaryToDelete.id)\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const initDictionaries = (dictionaries) => {\r\n    return {\r\n        type: 'INIT_DICTIONARY',\r\n        data: dictionaries\r\n    }\r\n}\r\n\r\nexport const addDictionary = (dictionary) => {\r\n    return {\r\n        type: 'ADD_DICTIONARY',\r\n        data: dictionary\r\n    }\r\n}\r\n\r\nexport const updatedDictionary = (dictionary) => {\r\n    return {\r\n        type: 'UPDATE',\r\n        data: dictionary\r\n    }\r\n}\r\n\r\nexport const deleteDictionary = (dictionary) => {\r\n    return {\r\n        type: 'DELETE_DICTIONARY',\r\n        data: dictionary\r\n    }\r\n}\r\n\r\nexport default dictionaryReducer","import axios from 'axios'\r\n\r\nconst dataUrl = '/api/data'\r\nconst dictionaryUrl = '/api/dictionary'\r\n\r\nconst getAllData = async () => {\r\n    const response = await axios.get(dataUrl)\r\n    return response.data\r\n}\r\n\r\nconst getAllDictionary = async () => {\r\n    const response = await axios.get(dictionaryUrl)\r\n    return response.data\r\n}\r\n\r\nconst postDictionary = async (dictionary) => {\r\n    const response = await axios.post(dictionaryUrl, dictionary)\r\n    return response.data\r\n}\r\n\r\nconst putDictionary = async (id, dictionary) => {\r\n    const response = await axios.put(`${dictionaryUrl}/${id}`, dictionary)\r\n    return response.data\r\n}\r\n\r\nconst deleteDictionary = async (id) => {\r\n    const response = await axios.delete(`${dictionaryUrl}/${id}`)\r\n    return response.data\r\n}\r\n\r\nexport default { getAllData, getAllDictionary, postDictionary, putDictionary, deleteDictionary }","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nconst Dataset = (props) => {\r\n\r\n    return (\r\n        <Table celled>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Product</Table.HeaderCell>\r\n                    <Table.HeaderCell>Color</Table.HeaderCell>\r\n                    <Table.HeaderCell>Price</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            \r\n            <Table.Body>\r\n                {props.datas.map((p, i) =>\r\n                    <Table.Row key={i}>\r\n                        <Table.Cell>{p.product}</Table.Cell>\r\n                        <Table.Cell>{p.color}</Table.Cell>\r\n                        <Table.Cell>{p.price}</Table.Cell>\r\n                    </Table.Row>\r\n                )}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        datas: state.datas,\r\n        editDictionary: state.editDictionary\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Dataset)","import React from 'react'\r\nimport Dataset from './Dataset'\r\nimport { DivWrapper } from '../styles/styles'\r\n\r\nconst Example = () => {\r\n    return (\r\n        <DivWrapper className='container'>\r\n            <div style={{'textAlign': 'center'}}>\r\n                <hr/>\r\n                <h3>Dataset for dictionary testing</h3>\r\n                <p>Create a dictionary or choose from the available dictionaries and apply to this dataset to see changes in 'color' column.</p>\r\n                <Dataset />\r\n            </div>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nexport default Example","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { DivWrapper } from '../styles/styles'\r\n\r\nconst Home = (props) => {\r\n    //console.log(props)\r\n    \r\n    return (\r\n        <DivWrapper className='container'>\r\n            <div style={{'textAlign': 'center'}}>\r\n                <h1>Dictionary Management Application</h1>\r\n                <hr></hr>\r\n            </div>\r\n            <div style={{'textAlign': 'center'}}>\r\n                <h2>Statistics:</h2>\r\n                    <h3><strong>{props.dictionaries.length}</strong> available dictionaries</h3>\r\n                    <h3><strong>{props.datas.length}</strong> dataset rows</h3>\r\n            </div>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        datas: state.datas,\r\n        dictionaries: state.dictionaries\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Home)","const alertReducer = (state = '', action) => {\r\n    switch(action.type) {\r\n        case 'NEW_ALERT':\r\n            return action.data\r\n        case 'HIDE_ALERT':\r\n            return state = ''\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setAlert = (content, duration) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'NEW_ALERT',\r\n            data: content\r\n        })\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: 'HIDE_ALERT'\r\n            })\r\n        }, duration * 1000)\r\n    }\r\n}\r\n\r\nexport default alertReducer","const successReducer = (state = '', action) => {\r\n    switch(action.type) {\r\n        case 'NEW_SUCCESS':\r\n            return action.data\r\n        case 'HIDE_SUCCESS':\r\n            return state = ''\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setSuccess = (content, duration) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: 'NEW_SUCCESS',\r\n            data: content\r\n        })\r\n        setTimeout(() => {\r\n            dispatch({\r\n                type: 'HIDE_SUCCESS'\r\n            })\r\n        }, duration * 1000)\r\n    }\r\n}\r\n\r\nexport default successReducer","// Duplicates\r\nexport const validateDuplicates = (valueSets) => {\r\n    const result = ['Duplicate value']\r\n\r\n    valueSets = valueSets.map(val => JSON.stringify(val))\r\n\r\n    for (let i = 0; i < valueSets.length; i++) {\r\n        if (valueSets.indexOf(valueSets[i], i +1) !== -1) {\r\n            result.push(valueSets.indexOf(valueSets[i], i +1))\r\n            result.push(JSON.parse(valueSets[i]))\r\n        }\r\n    }\r\n\r\n    console.log('result', result)\r\n    return result\r\n}\r\n\r\n// Forks\r\nexport const validateForks = (valueSets) => {\r\n    const result = ['Fork value']\r\n\r\n    const domains = valueSets.map(val => val[0])\r\n    const ranges = valueSets.map(val => val[1])\r\n    let domainNames = []\r\n\r\n    for (let i = 0; i < domains.length; i++) {\r\n        if (domains.indexOf(domains[i], i +1) !== -1) {\r\n            domainNames.push(`${i}${domains[i]}`)\r\n            domainNames.push(`${domains.lastIndexOf(domains[i])}${domains[i]}`)\r\n        }\r\n    }\r\n\r\n    const rangeNames = []\r\n    for (let i = 0; i < domainNames.length; i++) {\r\n        rangeNames.push(ranges[domainNames[i][0]])\r\n    }\r\n    \r\n    //checks that values are not duplicates, but forks\r\n    for (let i = 0; i < rangeNames.length; i += 2) {\r\n        if (rangeNames[i] !== rangeNames[i +1]) {\r\n            result.push(domainNames[i][0])\r\n            result.push(valueSets[domainNames[i][0]])\r\n            result.push(domainNames[i +1][0])\r\n            result.push(valueSets[domainNames[i +1][0]])\r\n        }\r\n    }\r\n\r\n    console.log('result', result)\r\n    return result\r\n}\r\n\r\n// Cycles\r\nexport const validateCycles = (valueSets) => {\r\n    const result = ['Cycle value']\r\n\r\n    const JsonValueSets = valueSets.map(val => JSON.stringify(val))\r\n\r\n    for (let i = 0; i < valueSets.length; i++) {\r\n        let swap = []\r\n        let swapper = []\r\n        swapper[0] = valueSets[i][1]\r\n        swapper[1] = valueSets[i][0]\r\n        swap.push(swapper)\r\n        swap = swap.map(val => JSON.stringify(val))\r\n        if (JsonValueSets.indexOf(swap[0]) !== -1) {\r\n            result.push(valueSets.indexOf(valueSets[i]))\r\n            result.push(valueSets[i])\r\n        }\r\n    }\r\n    \r\n    console.log('result', result)\r\n    return result\r\n}\r\n\r\n// Chains\r\nexport const validateChains = (valueSets) => {\r\n    const addChains = ['Chain value']\r\n\r\n    const domains = valueSets.map(val => val[0])\r\n    const ranges = valueSets.map(val => val[1])\r\n\r\n    for (let i = 0; i < ranges.length; i++) {\r\n        for (let j = 0; j < domains.length; j++) {\r\n            if (ranges[i] === domains[j]) {\r\n                if (domains[i] !== ranges[j]) {\r\n                    addChains.push(i)\r\n                    addChains.push(valueSets[i])\r\n                    addChains.push(j)\r\n                    addChains.push(valueSets[j])\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const result = [...new Set(addChains)]\r\n\r\n    console.log('result', result)\r\n    return result\r\n}\r\n\r\nexport const checkForIssues = (newDictionary) => {\r\n    //removes all prior issues so new values are checked fresh\r\n    for (let i = 0; i < newDictionary.valueSets.length; i++) {\r\n        if (newDictionary.valueSets[i].length > 2) {\r\n            let domain = newDictionary.valueSets[i][0]\r\n            let range = newDictionary.valueSets[i][1]\r\n            newDictionary.valueSets[i] = []\r\n            newDictionary.valueSets[i].push(domain)\r\n            newDictionary.valueSets[i].push(range)\r\n        }\r\n    }\r\n\r\n    const chains = validateChains(newDictionary.valueSets)\r\n    const cycles = validateCycles(newDictionary.valueSets)\r\n    const forks = validateForks(newDictionary.valueSets)\r\n    const duplicates = validateDuplicates(newDictionary.valueSets)\r\n\r\n    \r\n\r\n    if (chains.length > 1) { \r\n        for (let i = 1; i < chains.length; i = i +2) {\r\n            newDictionary.valueSets[chains[i]].push(chains[0])\r\n        }\r\n    }\r\n    if (cycles.length > 1) { \r\n        for (let i = 1; i < cycles.length; i = i +2) {\r\n            newDictionary.valueSets[cycles[i]].push(cycles[0])\r\n        }\r\n    }    \r\n    if (forks.length > 1) {\r\n        for (let i = 1; i < forks.length; i = i +2) {\r\n            newDictionary.valueSets[forks[i]].push(forks[0])\r\n        }\r\n    }\r\n    if (duplicates.length > 1) {\r\n        for (let i = 1; i < duplicates.length; i = i +2) {\r\n            newDictionary.valueSets[duplicates[i]].push(duplicates[0])\r\n        }   \r\n    } \r\n\r\n    newDictionary.valueSets.forEach(value => {\r\n        if (value.length === 2) {\r\n            value.push('-')\r\n        }\r\n    })\r\n\r\n    //sets every valueSet length to 3 despite the amount of issues, so tables are easier to code\r\n    for (let i = 0; i < newDictionary.valueSets.length; i++) {\r\n        if (newDictionary.valueSets[i].length > 3) {\r\n            let joinStrings = newDictionary.valueSets[i][2]\r\n            for (let j = 3; j < newDictionary.valueSets[i].length; j++) {\r\n                joinStrings = joinStrings.concat(', ', newDictionary.valueSets[i][j])\r\n            }\r\n            newDictionary.valueSets[i].splice(2)\r\n            newDictionary.valueSets[i][2] = joinStrings\r\n        }\r\n    }\r\n}\r\n\r\nexport const letterCase = (string) => {\r\n    const toArray = string.toLowerCase().split(' ')\r\n    const result = toArray.map(val => {\r\n        return val.replace(val.charAt(0), val.charAt(0).toUpperCase())\r\n    })\r\n    return result.join(' ')\r\n}","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addDictionary } from '../reducers/dictionaryReducer'\r\nimport { setAlert } from '../reducers/alertReducer'\r\nimport { setSuccess } from '../reducers/successReducer'\r\nimport services from '../services/services'\r\nimport styled from 'styled-components'\r\nimport { DivWrapper, FormStyle } from '../styles/styles'\r\nimport { Icon, Message } from 'semantic-ui-react'\r\nimport { checkForIssues, letterCase } from '../services/validators'\r\n\r\nconst CreateDictionary = (props) => {\r\n    const [original, setOriginal] = useState('')\r\n    const [desired, setDesired] = useState('')\r\n    const [values, setValues] = useState([])\r\n\r\n    const addValue = () => {\r\n        if (original === '' || desired === '') {\r\n            props.setAlert(`Value can not be empty`, 3)\r\n            return\r\n        }\r\n        const originalToCase = letterCase(original)\r\n        const desiredToCase = letterCase(desired)\r\n        const valueSet = [originalToCase, desiredToCase]\r\n\r\n        setValues([...values, valueSet])\r\n        setOriginal('')\r\n        setDesired('')\r\n    }\r\n\r\n    const removeValue = (value) => {\r\n        const newValues = values\r\n        const index = values.indexOf(value)\r\n        newValues.splice(index, 1)\r\n        setValues([...newValues])\r\n    }\r\n\r\n    const dictionaryDetails = (event) => {\r\n        event.preventDefault()\r\n        event.persist()\r\n\r\n        const name = event.target.name.value\r\n        const description = event.target.description.value\r\n\r\n        if (name === '') {\r\n            props.setAlert('Dictionary needs a name', 5)\r\n            return\r\n        }\r\n\r\n        // confirm this?\r\n        const newDictionary = {\r\n            name: name,\r\n            description: description,\r\n            valueSets: []\r\n        }\r\n\r\n        for (let i = 0; i < values.length; i++) {\r\n            newDictionary.valueSets.push(values[i])\r\n        }\r\n\r\n        if (newDictionary.valueSets.length === 0) {\r\n            props.setAlert('Dictionary needs at least one value', 5)\r\n            return\r\n        }\r\n\r\n        checkForIssues(newDictionary)\r\n\r\n        services.postDictionary(newDictionary)\r\n            .then(result => {\r\n                props.setSuccess('Dictionary added successfully!', 5)\r\n                event.target.name.value = ''\r\n                event.target.description.value = ''\r\n                setValues([...[]])\r\n                props.addDictionary(result)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                props.setAlert('Something went wrong, please try again', 5)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <DivWrapper className='container'>\r\n            <FormStyle>\r\n                <h1>Create Dictionary</h1><hr/>\r\n                {(props.success && <Message positive><Message.Header><h2>{props.success}</h2></Message.Header></Message>)}\r\n                {(props.alert && <Message negative><Message.Header>{props.alert}</Message.Header></Message>)}\r\n                <form onSubmit={dictionaryDetails}>\r\n                    <div className='form-row'>\r\n                        <div className='form-group col-md-6'>\r\n                            <label>Name</label>\r\n                            <input type='text' name='name' placeholder='Name of the dictionary' required className='form-control' />\r\n                        </div>\r\n                        <div className='from-group col-md-6'>\r\n                            <label>Description</label>\r\n                            <input type='text' name='description' placeholder='Description (optional)' className='form-control' />\r\n                        </div>\r\n                    </div>\r\n                    <hr />\r\n                        <div className='form-row' style={{'alignItems': 'start', 'justifyContent': 'space-between'}}>\r\n                            <div className='form-group col-md-5'>\r\n                                <label>Original value</label>\r\n                                <input type='text' value={original} onChange={({ target }) => setOriginal(target.value)} name='original' placeholder='Original value' className='form-control' />\r\n                            </div>\r\n                            <div className='from-group col-md-5'>\r\n                                <label>Desired value</label>\r\n                                <input type='text' value={desired} onChange={({ target }) => setDesired(target.value)} name='desired' placeholder='Desired value' className='form-control' />\r\n                            </div>\r\n                            <div onClick={addValue} className='btn btn-success' style={{'alignSelf': 'center', 'marginTop': '0.9rem'}}>Add <Icon name='add square'/></div>\r\n                        </div>\r\n                    <hr />\r\n                    \r\n                    {values.map((value, i) =>\r\n                        <div style={{'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'}} key={i}>\r\n                            <div>{`Original: `}<strong>{value[0]}</strong>{`,  Desired: `}<strong>{value[1]}</strong></div>\r\n                            <RemoveBtn className='btn' onClick={() => removeValue(value)}><Icon name='remove'/></RemoveBtn>\r\n                        </div>\r\n                    )}\r\n                    <hr />\r\n                    <CreateDiv>\r\n                        <p>When all the values are added, press \"Create\" -button to create a new dictionary with given values.</p>\r\n                        <button type='submit' className='btn btn-primary' style={{'width': '9rem'}}>Create</button>\r\n                    </CreateDiv>\r\n                </form>\r\n            </FormStyle>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nconst RemoveBtn = styled.div`\r\n    color: red;\r\n    width: 1.2rem;\r\n`\r\n\r\nconst CreateDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: baseline;\r\n    margin-bottom: 3rem;\r\n`\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        alert: state.alert,\r\n        success: state.success\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addDictionary,\r\n    setAlert,\r\n    setSuccess\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CreateDictionary)","const editReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'SET_EDIT':\r\n            return action.data\r\n        case 'UPDATE_EDIT':\r\n            return action.data\r\n        case 'CANCEL':\r\n            return [...[]]\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const editDictionary = (dictionary) => {\r\n    return {\r\n        type: 'SET_EDIT',\r\n        data: dictionary\r\n    }\r\n}\r\n\r\nexport const updatedEditDictionary = (dictionary) => {\r\n    return {\r\n        type: 'UPDATE_EDIT',\r\n        data: dictionary\r\n    }\r\n}\r\n\r\nexport const cancelEdit = () => {\r\n    return {\r\n        type: 'CANCEL',\r\n        data: []\r\n    }\r\n}\r\n\r\nexport default editReducer","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport services from '../services/services'\r\nimport { deleteDictionary } from '../reducers/dictionaryReducer'\r\nimport { editDictionary } from '../reducers/editReducer'\r\nimport { DivWrapper, DictionaryStyle, BtnContainer } from '../styles/styles'\r\nimport { Table, Button } from 'semantic-ui-react'\r\n// import { checkForIssues } from '../services/validators'\r\n\r\nconst AllDictionaries = (props) => {\r\n    //console.log(props.dictionaries)\r\n\r\n    if (props.dictionaries.length === 0) {\r\n        return (\r\n            <DivWrapper style={{'textAlign': 'center'}}>\r\n                <h2>No dictionaries, create one and they will appear here</h2>\r\n            </DivWrapper>\r\n        )\r\n    }\r\n\r\n    const remove = (dictionary) => {\r\n        if (window.confirm(`Delete ${dictionary.name}?`)) {\r\n            services.deleteDictionary(dictionary.id)\r\n                .then(result => {\r\n                    props.deleteDictionary(dictionary)\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    window.alert('Dictionary was not removed, try again')\r\n                })\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const applicable = (dictionary) => {\r\n        let disabled = false\r\n        dictionary.valueSets.forEach(values => {\r\n            if (values[2] !== '-' && values[2] !== 'Duplicate value') {\r\n                disabled = true\r\n            }\r\n        })\r\n        return disabled\r\n    }\r\n\r\n    const noIssuesStyle = { backgroundColor: '#ffffff'}\r\n    const duplicateStyle = { backgroundColor: '#fffaf3' }\r\n    const forkStyle = { backgroundColor: '#ffb3b3' }\r\n    const cycleStyle = { backgroundColor: '#ffb3b3' }\r\n    const chainStyle = { backgroundColor: '#ffb3b3' }\r\n    const manyIssuesStyle = { backgroundColor: '#ff6666' }\r\n    const noIssuesIcon = ''\r\n    const duplicateIcon = 'far fa-clone'\r\n    const cycleIcon = 'fas fa-sync-alt'\r\n    const forkIcon = 'fas fa-random'\r\n    const chainIcon = 'fas fa-link'\r\n    const issuesIcon = 'fas fa-exclamation-triangle'\r\n\r\n    return (\r\n        <DivWrapper className='container'>\r\n            <div style={{'textAlign': 'center', 'marginBottom': '2rem'}}>\r\n                <h1>Available Dictionaries</h1><hr/>\r\n            </div>\r\n            {/* <button onClick={() => checkForIssues(props.dictionaries[4])}>Validate</button> */}\r\n            <div>\r\n                {props.dictionaries.map((dictionary, i) => \r\n                    <div key={i}>\r\n                        <DictionaryStyle>\r\n                        <h4>{dictionary.name}</h4>\r\n                        <p>{dictionary.description}</p>                        \r\n                            <Table celled>\r\n                                <Table.Header>\r\n                                    <Table.Row>\r\n                                        <Table.HeaderCell>Domain</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Range</Table.HeaderCell>\r\n                                        <Table.HeaderCell>Issues</Table.HeaderCell>\r\n                                    </Table.Row>\r\n                                </Table.Header>\r\n                                <Table.Body>\r\n                                    {dictionary.valueSets.map((values, i) => {\r\n                                        let alert, icon\r\n                                        if (values[2] === 'Duplicate value') {\r\n                                            alert = duplicateStyle\r\n                                            icon = duplicateIcon\r\n                                        } else if (values[2] === 'Fork value') {\r\n                                            alert = forkStyle\r\n                                            icon = forkIcon\r\n                                        } else if (values[2] === 'Cycle value') {\r\n                                            alert = cycleStyle\r\n                                            icon = cycleIcon\r\n                                        } else if (values[2] === 'Chain value') {\r\n                                            alert = chainStyle\r\n                                            icon = chainIcon\r\n                                        } else if (values[2] === '-') {\r\n                                            alert = noIssuesStyle\r\n                                            icon = noIssuesIcon\r\n                                        } else {\r\n                                            alert = manyIssuesStyle\r\n                                            icon = issuesIcon\r\n                                        }\r\n                                        return (\r\n                                            <Table.Row key={i}>\r\n                                                {values.map((v, id) => {\r\n                                                    //console.log(v)\r\n                                                    return (\r\n                                                        <Table.Cell key={id} style={alert}>{v} <i className={icon}/></Table.Cell>\r\n                                                    )\r\n                                                })}\r\n                                            </Table.Row>\r\n                                        )\r\n                                    })}\r\n                                </Table.Body>\r\n                            </Table>\r\n                            <BtnContainer>\r\n                                <Button \r\n                                    basic color='blue'\r\n                                    style={{'height': '3rem'}}\r\n                                    onClick={() => {props.editDictionary(dictionary)}}\r\n                                    disabled={applicable(dictionary)}\r\n                                >\r\n                                    <Link to='/apply'>\r\n                                        {applicable(dictionary) ? <p>Can't be applied</p> : <p>Apply to dataset</p>}\r\n                                    </Link>\r\n                                </Button>\r\n                                <Link to='/edit'>\r\n                                    <Button basic color='teal' style={{'height': '3rem'}} onClick={() => {props.editDictionary(dictionary)}}>Edit dictionary</Button>\r\n                                </Link>\r\n                                <Button basic color='red' style={{'height': '3rem'}} onClick={() => remove(dictionary)}>Remove dictionary</Button>\r\n                            </BtnContainer>\r\n                        </DictionaryStyle><hr />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dictionaries: state.dictionaries\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    deleteDictionary,\r\n    editDictionary\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(AllDictionaries)","import React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport { DivWrapper, DictionaryStyleWide, FormStyle } from '../styles/styles'\r\nimport { Table, Button, Icon, Message } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { updatedEditDictionary } from '../reducers/editReducer'\r\nimport { updatedDictionary } from '../reducers/dictionaryReducer'\r\nimport { setAlert } from '../reducers/alertReducer'\r\nimport { setSuccess } from '../reducers/successReducer'\r\nimport services from '../services/services'\r\nimport { checkForIssues, letterCase } from '../services/validators'\r\n\r\nconst EditDictionary = (props) => {\r\n    const [showTable, setShowTable] = useState(true)\r\n    const [showEdit, setShowEdit] = useState(false)\r\n    const [showEditForm, setShowEditForm] = useState(false)\r\n    const [showName, setShowName] = useState(true)\r\n    const [showRename, setShowRename] = useState(false)\r\n\r\n    const [newName, setNewName] = useState(props.editDictionary.name)\r\n\r\n    const [newOriginal, setNewOriginal] = useState('')\r\n    const [newDesired, setNewDesired] = useState('')\r\n    const [oldValueSet, setOldValueSet] = useState(null)\r\n\r\n    if (props.editDictionary.length === 0) {\r\n        return null\r\n    }\r\n\r\n    const close = () => {\r\n        setShowTable(true)\r\n        setShowEditForm(false)\r\n        setShowEdit(false)\r\n        setShowName(true)\r\n    }\r\n\r\n    const showValueSet = (valueSet) => {\r\n        setOldValueSet(valueSet)\r\n        setNewOriginal(valueSet[0])\r\n        setNewDesired(valueSet[1])\r\n        setShowEditForm(true)\r\n        setShowTable(false)\r\n        setShowEdit(true)\r\n        setShowName(false)\r\n        setShowRename(false)\r\n    }\r\n\r\n    const setName = () => {\r\n        setShowName(false)\r\n        setShowRename(true)\r\n    }\r\n\r\n    const closeRename = () => {\r\n        setShowName(true)\r\n        setShowRename(false)\r\n    }\r\n\r\n    const renameDictionary = (event) => {\r\n        event.preventDefault()\r\n        const renamedDictionary = {\r\n            name: newName,\r\n            description: props.editDictionary.description,\r\n            valueSets: props.editDictionary.valueSets\r\n        }\r\n        services.putDictionary(props.editDictionary.id, renamedDictionary)\r\n            .then(result => {\r\n                props.setSuccess('Dictionary renamed successfully', 3)\r\n                props.updatedEditDictionary(result)\r\n                props.updatedDictionary(result)\r\n                setShowRename(false)\r\n                setShowName(true)\r\n                setNewName(newName)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                props.setAlert('Something went wrong, please try again', 3)\r\n            })\r\n    }\r\n\r\n    const addValues = (event) => {\r\n        event.preventDefault()\r\n        event.persist()\r\n\r\n        const original = event.target.original.value\r\n        const desired = event.target.desired.value\r\n\r\n        if (original === '' || desired === '') {\r\n            props.setAlert('Value can not be empty', 3)\r\n            return\r\n        }\r\n\r\n        //Sets first character of a word as uppercase\r\n        const originalToCase = letterCase(original)\r\n        const desiredToCase = letterCase(desired)\r\n\r\n        //copies valueSets from this dictionary\r\n        const newValueSets = JSON.parse(JSON.stringify(props.editDictionary.valueSets))\r\n\r\n        //adds new values to new valueSets\r\n        newValueSets.push([originalToCase, desiredToCase])\r\n\r\n        //creates new dictionary with new values\r\n        const updatedValuesDictionary = {\r\n            name: props.editDictionary.name,\r\n            description: props.editDictionary.description,\r\n            valueSets: newValueSets\r\n        }\r\n\r\n        //checks for dictionary consistency\r\n        checkForIssues(updatedValuesDictionary)\r\n\r\n        services.putDictionary(props.editDictionary.id, updatedValuesDictionary)\r\n            .then(result => {\r\n                props.setSuccess('New values added', 3)\r\n                props.updatedEditDictionary(result)\r\n                props.updatedDictionary(result)\r\n                event.target.original.value = ''\r\n                event.target.desired.value = ''\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                props.setAlert('Something went wrong, please try again', 3)\r\n            })\r\n    }\r\n\r\n    const editValueSet = (event) => {\r\n        event.preventDefault()\r\n        if (newOriginal === '' || newDesired === '') {\r\n            props.setAlert('Value can not be empty', 3)\r\n            return\r\n        }\r\n        \r\n        //copies valueSets from this dictionary\r\n        const newValues = JSON.parse(JSON.stringify(props.editDictionary.valueSets))\r\n        //removes old valueSet so new edited can be added instead\r\n        const index = props.editDictionary.valueSets.indexOf(oldValueSet)\r\n        newValues.splice(index, 1)\r\n\r\n        //Sets first character of a word as uppercase\r\n        const originalToCase = letterCase(newOriginal)\r\n        const desiredToCase = letterCase(newDesired)\r\n\r\n        //new edited values added\r\n        newValues.push([originalToCase, desiredToCase])\r\n\r\n        const updatedValuesDictionary = {\r\n            name: props.editDictionary.name,\r\n            description: props.editDictionary.description,\r\n            valueSets: newValues\r\n        }\r\n\r\n        //checks for dictionary consistency\r\n        checkForIssues(updatedValuesDictionary)\r\n\r\n        services.putDictionary(props.editDictionary.id, updatedValuesDictionary)\r\n            .then(result => {\r\n                props.setSuccess('Values updated succesfully', 3)\r\n                props.updatedEditDictionary(result)\r\n                props.updatedDictionary(result)\r\n                setShowEditForm(false)\r\n                setShowTable(true)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                props.setAlert('Something went wrong, please try again', 3)\r\n            })\r\n    }\r\n\r\n    const removeValueSet = (valueSet) => {\r\n        //copies valueSets from this dictionary\r\n        const newValues = JSON.parse(JSON.stringify(props.editDictionary.valueSets))\r\n        //removes old valueSet\r\n        const index = props.editDictionary.valueSets.indexOf(valueSet)\r\n        newValues.splice(index, 1)\r\n\r\n        const updatedValuesDictionary = {\r\n            name: props.editDictionary.name,\r\n            description: props.editDictionary.description,\r\n            valueSets: newValues\r\n        }\r\n\r\n        //checks for dictionary consistency\r\n        checkForIssues(updatedValuesDictionary)\r\n\r\n        services.putDictionary(props.editDictionary.id, updatedValuesDictionary)\r\n            .then(result => {\r\n                props.setSuccess('Values removed succesfully', 3)\r\n                props.updatedEditDictionary(result)\r\n                props.updatedDictionary(result)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                props.setAlert('Something went wrong, please try again', 3)\r\n            })\r\n    }\r\n\r\n    const tableShow = { display: showTable ? '' : 'none' }\r\n    const editShow = { display: showEdit ? '' : 'none' }\r\n    const editFormShow = { display: showEditForm ? '' : 'none' }\r\n    const renameShow = { display: showRename ? '' : 'none' }\r\n    const dictionaryNameShow = { display: showName ? '' : 'none' }\r\n\r\n    const noIssuesStyle = { backgroundColor: '#ffffff'}\r\n    const duplicateStyle = { backgroundColor: '#fffaf3' }\r\n    const forkStyle = { backgroundColor: '#ffb3b3' }\r\n    const cycleStyle = { backgroundColor: '#ffb3b3' }\r\n    const chainStyle = { backgroundColor: '#ffb3b3' }\r\n    const manyIssuesStyle = { backgroundColor: '#ff6666' }\r\n    const noIssuesIcon = ''\r\n    const duplicateIcon = 'far fa-clone'\r\n    const cycleIcon = 'fas fa-sync-alt'\r\n    const forkIcon = 'fas fa-random'\r\n    const chainIcon = 'fas fa-link'\r\n    const issuesIcon = 'fas fa-exclamation-triangle'\r\n\r\n    return (\r\n        <DivWrapper className='container'>\r\n            <div style={{'marginBottom': '2rem','textAlign': 'center', 'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'space-evenly'}}>\r\n                <h1>Edit Dictionary</h1>\r\n                <Link to='/available'>\r\n                    <Button color='teal'>Go Back to Available Dictionaries</Button>\r\n                </Link>\r\n            </div>\r\n            <hr />\r\n            <DictionaryStyleWide>\r\n                <div>\r\n                    <NameDiv style={dictionaryNameShow}>\r\n                        <h4>{props.editDictionary.name}</h4>\r\n                        <Button onClick={setName} basic color='brown'>Rename</Button>\r\n                    </NameDiv>\r\n                    <form onSubmit={renameDictionary} style={renameShow}>\r\n                        <div className='form-row'>\r\n                            <div className='form-group col-md-5'>\r\n                                <input type='text' value={newName} onChange={({ target }) => setNewName(target.value)} className='form-control' />\r\n                            </div>\r\n                        </div>\r\n                        <button type='submit' className='btn btn-success'>Apply</button>\r\n                        <div onClick={closeRename} className='btn btn-outline-secondary'>Cancel</div>\r\n                    </form>\r\n                </div>\r\n                <p>{props.editDictionary.description}</p>\r\n                <Table celled style={tableShow}> \r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Domain</Table.HeaderCell>\r\n                            <Table.HeaderCell>Range</Table.HeaderCell>\r\n                            <Table.HeaderCell>Issues / Edit values</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                        <Table.Body>\r\n                            {props.editDictionary.valueSets.map((values, i) => {\r\n                                let alert, icon\r\n                                if (values[2] === 'Duplicate value') {\r\n                                    alert = duplicateStyle\r\n                                    icon = duplicateIcon\r\n                                } else if (values[2] === 'Fork value') {\r\n                                    alert = forkStyle\r\n                                    icon = forkIcon\r\n                                } else if (values[2] === 'Cycle value') {\r\n                                    alert = cycleStyle\r\n                                    icon = cycleIcon\r\n                                } else if (values[2] === 'Chain value') {\r\n                                    alert = chainStyle\r\n                                    icon = chainIcon\r\n                                } else if (values[2] === '-') {\r\n                                    alert = noIssuesStyle\r\n                                    icon = noIssuesIcon \r\n                                } else {\r\n                                    alert = manyIssuesStyle\r\n                                    icon = issuesIcon\r\n                                }\r\n                                return (\r\n                                    <Table.Row key={i}>\r\n                                        {values.map((v, id) => {\r\n                                            //console.log(v)\r\n                                            return (\r\n                                                <Table.Cell key={id} style={alert}>{v} <i className={icon}/></Table.Cell>\r\n                                            )\r\n                                        })}\r\n                                        <Table.Cell className='btn btn-info' style={{'cursor': 'pointer', 'width': '50%'}} onClick={() => showValueSet(values)}>Edit</Table.Cell>\r\n                                        <Table.Cell className='btn btn-danger' style={{'cursor': 'pointer', 'width': '50%'}} onClick={() => removeValueSet(values)}>Remove</Table.Cell>\r\n                                    </Table.Row>\r\n                                )\r\n                            })}\r\n                        </Table.Body>\r\n                </Table>\r\n                {(props.success && <Message positive><Message.Header>{props.success}</Message.Header></Message>)}\r\n                {(props.alert && <Message negative><Message.Header>{props.alert}</Message.Header></Message>)}\r\n                \r\n                <form onSubmit={addValues} style={tableShow}>\r\n                    <hr />\r\n                    <h2>Add values</h2>\r\n                    <div className='form-row' style={{'alignItems': 'start', 'justifyContent': 'space-between'}}>\r\n                        <div className='form-group col-md-5'>\r\n                            <label>Original value</label>\r\n                            <input type='text' name='original' placeholder='Original value' className='form-control' />\r\n                        </div>\r\n                        <div className='form-group col-md-5'>\r\n                            <label>Desired value</label>\r\n                            <input type='text' name='desired' placeholder='Desired value' className='form-control' />\r\n                        </div>\r\n                        <button type='submit' className='btn btn-success' style={{'alignSelf': 'center', 'marginTop': '0.9rem'}}>Add <Icon name='add square'/></button>\r\n                    </div>\r\n                </form>\r\n            </DictionaryStyleWide>\r\n\r\n            {/* Edit values */}\r\n            <div style={editShow}>\r\n                <FormStyle>\r\n                    <form onSubmit={editValueSet} style={editFormShow}>\r\n                        <div className='form-row' style={{'alignItems': 'start', 'justifyContent': 'space-between'}}>\r\n                            <div className='form-group col-md-5'>\r\n                                <input type='text' value={newOriginal} onChange={({ target }) => setNewOriginal(target.value)} className='form-control' />\r\n                            </div>\r\n                            <div className='form-group col-md-5'>\r\n                                <input type='text' value={newDesired} onChange={({ target }) => setNewDesired(target.value)} className='form-control' />\r\n                            </div>\r\n                            <button type='submit' className='btn btn-success' style={{'alignSelf': 'center', 'marginBottom': '1rem'}}>Apply changes</button>\r\n                        </div>\r\n                        <div className='btn btn-outline-info' onClick={close} style={{'marginBottom': '3rem'}}>Ready/Back</div>\r\n                    </form>\r\n                </FormStyle>\r\n            </div>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nconst NameDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        editDictionary: state.editDictionary,\r\n        alert: state.alert,\r\n        success: state.success\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updatedEditDictionary,\r\n    updatedDictionary,\r\n    setSuccess,\r\n    setAlert\r\n}\r\n \r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(EditDictionary)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Table, Button } from 'semantic-ui-react'\r\nimport { DivWrapper, ApplyDictionaryStyle } from '../styles/styles'\r\nimport Dataset from './Dataset'\r\nimport { editData } from '../reducers/dataReducer'\r\n\r\nconst ApplyDictionary = (props) => {\r\n    //console.log(props)\r\n\r\n    if (props.editDictionary.length === 0) {\r\n        return null\r\n    }\r\n\r\n    const apply = (valueSets) => {\r\n        //console.log(valueSets)\r\n        props.editData(valueSets)\r\n    }\r\n\r\n    return (\r\n        <DivWrapper className='container'>\r\n            <div style={{'textAlign': 'center', 'marginBottom': '2rem'}}>\r\n                <h1>Dictionary to apply</h1>\r\n                <h4>{props.editDictionary.name}</h4>\r\n                <p>{props.editDictionary.description}</p>\r\n                <hr />\r\n            </div>\r\n            <div className='row'>\r\n                <ApplyDictionaryStyle className='col-lg-6 col-md-6 col-sm-12'>\r\n                    <Table celled> \r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Domain</Table.HeaderCell>\r\n                                <Table.HeaderCell>Range</Table.HeaderCell>\r\n                                <Table.HeaderCell>Issues</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {props.editDictionary.valueSets.map((values, i) =>\r\n                                <Table.Row key={i}>\r\n                                    {values.map((v, i) =>\r\n                                        <Table.Cell key={i}>{v}</Table.Cell>\r\n                                    )}\r\n                                </Table.Row>\r\n                            )}\r\n                        </Table.Body>\r\n                    </Table>\r\n                </ApplyDictionaryStyle>\r\n                <ApplyDictionaryStyle className='col-lg-6 col-md-6 col-sm-12'>\r\n                    <Dataset />\r\n                </ApplyDictionaryStyle>\r\n            </div>\r\n            <Button onClick={() => apply(props.editDictionary.valueSets)} color='blue' size='big' style={{'marginBottom': '2rem'}}>Apply</Button>\r\n        </DivWrapper>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        datas: state.datas,\r\n        editDictionary: state.editDictionary\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    editData\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ApplyDictionary)","import React, { useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport styled from 'styled-components'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { BtnContainer } from './styles/styles'\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { initData } from './reducers/dataReducer'\r\nimport { initDictionaries } from './reducers/dictionaryReducer'\r\nimport services from './services/services'\r\nimport Example from './components/Example'\r\nimport Home from './components/Home'\r\nimport CreateDictionary from './components/CreateDictionary'\r\nimport AllDictionaries from './components/AllDictionaries'\r\nimport EditDictionary from './components/EditDictionary'\r\nimport ApplyDictionary from './components/ApplyDictionary'\r\n\r\nconst App = (props) => {\r\n\r\n    useEffect(() => {\r\n        services.getAllData()\r\n            .then(result => {\r\n                props.initData(result)\r\n            })\r\n        services.getAllDictionary()\r\n            .then(result => {\r\n                props.initDictionaries(result)\r\n            })\r\n    }, [])\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Router>\r\n                <div className='container'>\r\n                    <NavBar>\r\n                        <BtnContainer>\r\n                            <Link to='/'>\r\n                                <Button size='big' color='violet'>Home</Button>\r\n                            </Link>\r\n                            <Link to='/create'>\r\n                                <Button size='big' color='violet'>Create Dictionary</Button>\r\n                            </Link>\r\n                            <Link to='/available'>\r\n                                <Button size='big' color='violet'>Available Dictionaries</Button>\r\n                            </Link>\r\n                            <Link to='/dataset'>\r\n                                <Button size='big' color='violet'>Example Dataset</Button>\r\n                            </Link>\r\n                        </BtnContainer>\r\n                    </NavBar>\r\n                </div>\r\n            \r\n                <Route exact path='/' render={() => <Home />} />\r\n                <Route path='/dataset' render={() => <Example />} />\r\n                <Route path='/create' render={() => <CreateDictionary />} />\r\n                <Route path='/available' render={() => <AllDictionaries /> } />\r\n                <Route path='/edit' render={() => <EditDictionary /> } />\r\n                <Route path='/apply' render={() => <ApplyDictionary />} />\r\n            </Router>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst NavBar = styled.nav`\r\n    margin-top: 1rem;\r\n`\r\n\r\nexport default connect(null, { initData, initDictionaries })(App)","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport dataReducer from './reducers/dataReducer'\r\nimport dictionaryReducer from './reducers/dictionaryReducer'\r\nimport editReducer from './reducers/editReducer'\r\nimport alertReducer from './reducers/alertReducer'\r\nimport successReducer from './reducers/successReducer'\r\n\r\nconst reducers = combineReducers({\r\n    datas: dataReducer,\r\n    dictionaries: dictionaryReducer,\r\n    editDictionary: editReducer,\r\n    alert: alertReducer,\r\n    success: successReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n)"],"sourceRoot":""}